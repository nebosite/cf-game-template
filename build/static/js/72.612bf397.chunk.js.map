{"version":3,"file":"static/js/72.612bf397.chunk.js","mappings":"qQACA,GAAgB,WAAa,2BAA2B,OAAS,uBAAuB,UAAY,0BAA0B,OAAS,uBAAuB,WAAa,2BAA2B,gBAAkB,iC,2BCkBlNA,GAFLC,EAAAA,EAAAA,IAAO,WAAD,IACNC,EAAAA,EAAAA,IAAAA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAWG,WAAYC,GACX,IAAD,yBACI,cAAMA,IAVVC,iBASA,IARAC,EAAI,IAQJ,EAPAC,EAAI,IAOJ,EANAC,mBAMA,IA6BAC,aAAe,SAACC,GACZ,IAAOC,EAAY,EAAKP,MAAjBO,SACP,IAAW,OAARA,QAAQ,IAARA,OAAA,EAAAA,EAAUC,aAAcC,EAAAA,GAAAA,SACvB,EAAKL,cAAT,CAGA,EAAKA,cAAcM,UAAY,UAC/B,EAAKN,cAAcO,SAAS,EAAE,EAAE,EAAKT,EAAE,EAAKC,GAG5CI,EAASK,UAAUN,GACnB,IAAMO,EAAON,EAASO,SACtB,EAAKV,cAAcM,UAAYG,EAAKE,MACpC,EAAKX,cAAcO,SAASE,EAAKG,EAAI,EAAKd,EAAI,GAAIW,EAAKI,EAAI,EAAKd,EAAI,GAAI,GAAI,GAV9C,CAWjC,EAxCGH,EAAMO,SAAUW,OAAOC,UAAU,WAAW,SAACC,GAAD,OAAO,EAAKf,aAAae,EAAzB,IAC5C,EAAKnB,YAAc,aAAe,EAAKD,MAAMO,SAAUc,SAJ3D,CAKC,CA2EA,O,yCAtED,WAEIC,KAAKC,oBACR,G,gCAKD,WACC,IAAD,EACUC,EAASC,SAASC,eAAeJ,KAAKrB,aAC5CqB,KAAKlB,cAAL,UAAqBoB,EAAOG,WAAW,aAAvC,aAAgDC,EAChDN,KAAKpB,EAAIsB,EAAOK,MAChBP,KAAKnB,EAAIqB,EAAOM,MACnB,G,yBAwBD,SAAYd,EAAWC,GAEnB,IAAOV,EAAYe,KAAKtB,MAAjBO,SACPA,EAAUO,SAASE,EAAIA,EACvBT,EAAUO,SAASG,EAAIA,EACvBV,EAAUwB,MAAMf,EAAEC,EACrB,G,oBAKD,WAAU,IAAD,OACEV,EAAYe,KAAKtB,MAAjBO,SACP,OAAKA,GAGD,4BACI,wBAAKA,EAAUyB,cAEf,iEAEI,gBAAKC,UAAWC,EAAAA,gBAAhB,UACI,SAAC,KAAD,CACIC,SAAUb,KAAKrB,YACf4B,MAAO,IAAKC,OAAQ,IACpBM,QAAS,SAACpB,EAAEC,GAAH,OAAS,EAAKoB,YAAYrB,EAAEC,EAA5B,OAEjB,mBAAQgB,UAAWC,EAAAA,aAAqBE,QAAS,kBAAI,EAAKpC,MAAMO,SAAU+B,eAAzB,EAAjD,4BACA,mBAAQL,UAAWC,EAAAA,aAAqBE,QAAS,kBAAI,EAAKpC,MAAMO,SAAUgC,WAAzB,EAAjD,kCAfU,wCAmBzB,OA5FJxC,CACwByC,EAAAA,aAAAA,IAAAA,EAoGJC,GAFpB3C,EAAAA,EAAAA,IAAO,WAAD,IACNC,EAAAA,EAAAA,IAAAA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAIqB,OAJrBA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KAGG2C,UAAmBC,EAAAA,GAAAA,QAAAA,EACnBC,gBAAkB,CAACC,KAAM,EAAGC,IAAK,GAAf,EA8FjB,OA9FiB,0CAKlB,WAEI,IAAMC,EAAYtB,SAASC,eAAeJ,KAAKtB,MAAMgD,aAAaC,aAClE,GAAGF,EACH,CACI,IAAIG,EAAOH,EAAUI,wBACrB7B,KAAKsB,gBAAkB,CAACC,KAAMK,EAAKL,KAAMC,IAAKI,EAAKJ,IACtD,CACJ,G,uBAKD,WACI,IAAOvC,EAAYe,KAAKtB,MAAjBO,SACJA,EAAUC,YAAcc,KAAKoB,WAC5BU,EAAAA,GAAAA,QAAoB,CAAC,GAAG,GAAG,GAAG,KAElC9B,KAAKoB,UAAYnC,EAAUC,SAC9B,G,6BAMD,WAA2B,IAAD,OACfD,EAAYe,KAAKtB,MAAjBO,SAIP,OAFA8C,QAAQC,IAAR,4CAA0C/C,QAA1C,IAA0CA,OAA1C,EAA0CA,EAAUC,YAE7CD,EAAUC,WACb,KAAK+C,EAAAA,GAAAA,eACD,OAAQ,SAAC,WAAD,WACJ,gBAAKtB,UAAWC,EAAAA,UAAhB,2EAIR,KAAKzB,EAAAA,GAAAA,QAED,OADAa,KAAKkC,aACE,SAAC3D,EAAD,IACX,KAAKY,EAAAA,GAAAA,WAED,OADAa,KAAKkC,aACE,+CACX,KAAKb,EAAAA,GAAAA,SACD,OACI,UAAC,WAAD,YACA,8DACA,0BAAK,mBAAQP,QAAS,kBAAI,EAAKpC,MAAMO,SAAUkD,SAAzB,EAAjB,uBAGb,KAAKF,EAAAA,GAAAA,UACD,OACI,SAAC,WAAD,WACA,6DAAqCjC,KAAKtB,MAAMO,SAAUmD,eAKlE,QACI,OAAO,6EAElB,G,oBAKD,WACI,IAAOnD,EAAYe,KAAKtB,MAAjBO,SACP,OACI,0BAEI,SAAC,KAAD,CAAcyC,aAAc1B,KAAKtB,MAAMgD,aACnCW,cAAe,KACfC,aAAc,KAFlB,UAGI,iBAAK3B,UAAWC,EAAAA,WAAhB,WACI,iBAAKD,UAAW4B,IAAW3B,EAAAA,OAAeA,EAAAA,QAA1C,WACI,iBAAMD,UAAW4B,IAAW3B,EAAAA,WAA5B,uBACA,iCAAO3B,QAAP,IAAOA,OAAP,EAAOA,EAAUyB,cACjB,mBAAQC,UAAW4B,IAAW3B,EAAAA,YAAoBE,QAAS,yBAAI7B,QAAJ,IAAIA,OAAJ,EAAIA,EAAUkD,SAAd,EAA3D,mBAEJ,gBAAKK,MAAO,CAACC,OAAQ,SAArB,UACI,SAAC,KAAD,UACKzC,KAAK0C,4BAOjC,OAlGJjE,CAESyC,EAAAA,aAAAA,IAAAA,C","sources":["webpack://@clusterfun-game/template/./src/views/Client.module.css?61a9","views/Client.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"gameclient\":\"Client_gameclient__ybtgH\",\"divRow\":\"Client_divRow__XE9Um\",\"gametitle\":\"Client_gametitle__JGNoT\",\"topbar\":\"Client_topbar__2aGHN\",\"quitbutton\":\"Client_quitbutton__iFP-Y\",\"gameCanvasFrame\":\"Client_gameCanvasFrame__6cUpO\"};","// App Navigation handled here\r\nimport React from \"react\";\r\nimport { observer, inject } from \"mobx-react\";\r\nimport { TemplatoClientModel, TemplatoClientState } from \"../models/ClientModel\";\r\nimport { UIProperties, UINormalizer } from \"clusterfun-client\";\r\nimport styles from './Client.module.css';\r\nimport { ErrorBoundary } from \"clusterfun-client\";\r\nimport { SafeBrowser } from \"clusterfun-client\";\r\nimport { GeneralClientState } from \"clusterfun-client\";\r\nimport { GeneralGameState } from \"clusterfun-client\";\r\nimport { ClusterCanvas } from \"clusterfun-client\";\r\nimport classNames from \"classnames\";\r\n\r\n\r\n// -------------------------------------------------------------------\r\n// Game Screen -  Client play UI\r\n// -------------------------------------------------------------------\r\n@inject(\"appModel\")\r\n@observer\r\nclass GameScreen extends React.Component<{appModel?: TemplatoClientModel}> \r\n{\r\n    canvasDomId: string;\r\n    w = 100;\r\n    h = 100;\r\n    canvasContext?: CanvasRenderingContext2D;\r\n\r\n    // -------------------------------------------------------------------\r\n    // ctor\r\n    // ------------------------------------------------------------------- \r\n    constructor(props: {appModel?: TemplatoClientModel})\r\n    {\r\n        super(props);\r\n\r\n        props.appModel!.onTick.subscribe(\"animate\", (e) => this.animateFrame(e))\r\n        this.canvasDomId = \"PlayCanvas\" + this.props.appModel!.playerId;\r\n    }\r\n\r\n    // -------------------------------------------------------------------\r\n    // When the component mounts, learn about the canvas size and location\r\n    // -------------------------------------------------------------------\r\n    componentDidMount()\r\n    {\r\n        this.componentDidUpdate();   \r\n    }\r\n\r\n    // -------------------------------------------------------------------\r\n    // When the component mounts, learn about the canvas size and location\r\n    // -------------------------------------------------------------------\r\n    componentDidUpdate()\r\n    {\r\n        const canvas = document.getElementById(this.canvasDomId) as HTMLCanvasElement; \r\n        this.canvasContext = canvas.getContext(\"2d\") ?? undefined;\r\n        this.w = canvas.width; \r\n        this.h = canvas.height;\r\n    }\r\n\r\n    // -------------------------------------------------------------------\r\n    // animateFrame - render a single animation frame to the canvas\r\n    // -------------------------------------------------------------------\r\n    animateFrame = (elapsed_ms: number) => {\r\n        const {appModel} = this.props;\r\n        if(appModel?.gameState !== TemplatoClientState.Playing) return;\r\n        if(!this.canvasContext) return;\r\n\r\n        // Clear canvas\r\n        this.canvasContext.fillStyle = \"#000000\"\r\n        this.canvasContext.fillRect(0,0,this.w,this.h);\r\n\r\n        // Draw something\r\n        appModel.gameThink(elapsed_ms);\r\n        const ball = appModel.ballData;\r\n        this.canvasContext.fillStyle = ball.color;\r\n        this.canvasContext.fillRect(ball.x * this.w - 30, ball.y * this.h - 30, 60, 60);\r\n    }\r\n\r\n    // -------------------------------------------------------------------\r\n    // Handle taps from the user\r\n    // -------------------------------------------------------------------\r\n    handleClick(x: number, y:number)\r\n    {\r\n        const {appModel} = this.props;\r\n        appModel!.ballData.x = x;\r\n        appModel!.ballData.y = y;   \r\n        appModel!.doTap(x,y)     \r\n    }\r\n\r\n    // -------------------------------------------------------------------\r\n    // render\r\n    // ------------------------------------------------------------------- \r\n    render() {\r\n        const {appModel} = this.props;\r\n        if (!appModel) return <div>NO APPMODEL</div>; \r\n\r\n        return (\r\n            <div>\r\n                <h4>{appModel!.playerName}</h4>\r\n\r\n                <div>\r\n                    Tap the screen to set dot position   \r\n                    <div className={styles.gameCanvasFrame} >\r\n                        <ClusterCanvas \r\n                            canvasId={this.canvasDomId}\r\n                            width={800} height={800}\r\n                            onClick={(x,y) => this.handleClick(x,y)} />\r\n                    </div>\r\n                    <button className={styles.clientButton} onClick={()=>this.props.appModel!.doColorChange()}>Change Colors</button>\r\n                    <button className={styles.clientButton} onClick={()=>this.props.appModel!.doMessage()}>Say Something</button>\r\n                </div>      \r\n            </div>\r\n        );\r\n    };\r\n\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n// Client Page\r\n// -------------------------------------------------------------------\r\n@inject(\"appModel\")\r\n@observer\r\nexport default class Client \r\n  extends React.Component<{appModel?: TemplatoClientModel, uiProperties: UIProperties}> {\r\n    lastState:string = GeneralGameState.Unknown;\r\n    containerOffset = {left: 0, top: 0};\r\n\r\n    // -------------------------------------------------------------------\r\n    // When the component updates, learn about our overall offset\r\n    // -------------------------------------------------------------------\r\n    componentDidUpdate()\r\n    {\r\n        const container = document.getElementById(this.props.uiProperties.containerId) as HTMLElement; \r\n        if(container)\r\n        {\r\n            var rect = container.getBoundingClientRect();\r\n            this.containerOffset = {left: rect.left, top: rect.top}\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------\r\n    // Do something to alert the user if the game state changed\r\n    // ------------------------------------------------------------------- \r\n    alertUser() {\r\n        const {appModel} = this.props;\r\n        if(appModel!.gameState !== this.lastState) { \r\n            SafeBrowser.vibrate([50,50,50,50]);\r\n        }\r\n        this.lastState = appModel!.gameState as string;\r\n    }\r\n\r\n\r\n    // -------------------------------------------------------------------\r\n    // renderSubScreen\r\n    // ------------------------------------------------------------------- \r\n    private renderSubScreen() {\r\n        const {appModel} = this.props;\r\n\r\n        console.log(`RENDERING WITH GAME STATE: ${appModel?.gameState}`)\r\n\r\n        switch(appModel!.gameState) {\r\n            case GeneralClientState.WaitingToStart:\r\n                return (<React.Fragment>\r\n                    <div className={styles.wait_text}>\r\n                    Sit tight, we are waiting for the host to start the game...\r\n                    </div>\r\n                </React.Fragment>);  \r\n            case TemplatoClientState.Playing:\r\n                this.alertUser();\r\n                return <GameScreen />\r\n            case TemplatoClientState.EndOfRound:\r\n                this.alertUser();\r\n                return <div>Round is over... </div>\r\n            case GeneralGameState.GameOver:\r\n                return (\r\n                    <React.Fragment>\r\n                    <p>Game is over, thanks for playing!</p>\r\n                    <div><button onClick={()=>this.props.appModel!.quitApp()}>Quit</button></div>\r\n                    </React.Fragment>\r\n                );\r\n            case GeneralClientState.JoinError:\r\n                return (\r\n                    <React.Fragment>\r\n                    <p>Could not join the game because: {this.props.appModel!.joinError}</p>\r\n                    </React.Fragment>\r\n                );\r\n\r\n    \r\n            default:\r\n                return <div>These are not the droids you are looking for...</div>          \r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------\r\n    // render\r\n    // ------------------------------------------------------------------- \r\n    render() {\r\n        const {appModel} = this.props;\r\n        return (\r\n            <div>\r\n\r\n                <UINormalizer uiProperties={this.props.uiProperties}\r\n                    virtualHeight={1920}\r\n                    virtualWidth={1080}>\r\n                    <div className={styles.gameclient}>\r\n                        <div className={classNames(styles.divRow, styles.topbar)}>\r\n                            <span className={classNames(styles.gametitle)}>Templato</span> \r\n                            <span>{appModel?.playerName}</span>\r\n                            <button className={classNames(styles.quitbutton)} onClick={()=>appModel?.quitApp()}>X</button>\r\n                        </div>\r\n                        <div style={{margin: \"100px\"}}>\r\n                            <ErrorBoundary>\r\n                                {this.renderSubScreen()}\r\n                            </ErrorBoundary>\r\n                        </div>\r\n                    </div>\r\n                </UINormalizer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"],"names":["GameScreen","inject","observer","props","canvasDomId","w","h","canvasContext","animateFrame","elapsed_ms","appModel","gameState","TemplatoClientState","fillStyle","fillRect","gameThink","ball","ballData","color","x","y","onTick","subscribe","e","playerId","this","componentDidUpdate","canvas","document","getElementById","getContext","undefined","width","height","doTap","playerName","className","styles","canvasId","onClick","handleClick","doColorChange","doMessage","React","Client","lastState","GeneralGameState","containerOffset","left","top","container","uiProperties","containerId","rect","getBoundingClientRect","SafeBrowser","console","log","GeneralClientState","alertUser","quitApp","joinError","virtualHeight","virtualWidth","classNames","style","margin","renderSubScreen"],"sourceRoot":""}