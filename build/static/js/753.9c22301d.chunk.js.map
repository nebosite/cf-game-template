{"version":3,"file":"static/js/753.9c22301d.chunk.js","mappings":"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","sources":["webpack://@clusterfun-game/template/./src/views/Presenter.module.css?f512","assets/Assets.ts","views/Presenter.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"gamepresenter\":\"Presenter_gamepresenter__UdgA+\",\"gameTitle\":\"Presenter_gameTitle__wZp1O\",\"question\":\"Presenter_question__NPonD\",\"divRow\":\"Presenter_divRow__t-w08\",\"answerBox\":\"Presenter_answerBox__8mbm2\",\"nameBox\":\"Presenter_nameBox__FpyNl\",\"roomCode\":\"Presenter_roomCode__8-mvG\",\"gameCanvasFrame\":\"Presenter_gameCanvasFrame__rFTGh\",\"gameCanvas\":\"Presenter_gameCanvas__TLd9I\"};","import logo from './images/Logo.png'\r\nimport ding from './sounds/ding.wav'\r\nimport hello from './sounds/hello.mp3'\r\nimport response from './sounds/response.mp3'\r\nconst TemplatoAssets =\r\n{\r\n    images: {\r\n        logo\r\n    },\r\n    sounds: {\r\n        ding,     \r\n        hello,    \r\n        response,  \r\n    }\r\n}\r\n\r\nexport default TemplatoAssets\r\n","// App Navigation handled here\r\nimport React from \"react\";\r\nimport { observer, inject } from \"mobx-react\";\r\nimport { UIProperties, UINormalizer, DevUI } from \"clusterfun-client\";\r\nimport styles from \"./Presenter.module.css\"\r\nimport classNames from \"classnames\";\r\nimport { MediaHelper } from \"clusterfun-client\";\r\nimport { PresenterGameEvent, PresenterGameState, GeneralGameState } from \"clusterfun-client\";\r\nimport { BaseAnimationController } from \"clusterfun-client\";\r\nimport { observable } from \"mobx\";\r\nimport TemplatoAssets from \"../assets/Assets\";\r\nimport { TemplatoVersion } from \"../models/GameSettings\";\r\nimport { TemplatoGameEvent, TemplatoGameState, TemplatoPresenterModel } from \"models/PresenterModel\";\r\n\r\n\r\n@inject(\"appModel\") @observer\r\nclass GatheringPlayersPage  extends React.Component<{appModel?: TemplatoPresenterModel}> {\r\n    // -------------------------------------------------------------------\r\n    // render\r\n    // -------------------------------------------------------------------\r\n    render() {\r\n        const {appModel} = this.props;\r\n        if (!appModel) return <div>NO APP MODEL</div>;\r\n\r\n        return (\r\n            <div>\r\n                <h3>Welcome to {appModel.name}</h3>\r\n                <p>This is an example app for clusterfun.</p>\r\n                <p>To Join: go to http://{ window.location.host} and enter this room code: {appModel.roomId}</p>\r\n                {\r\n                    appModel.players.length > 0\r\n                    ?   <div><p style={{fontWeight: 600}}>Joined team members:</p>\r\n                            <div className={styles.divRow}>\r\n                                {appModel.players.map(player => (<div className={styles.nameBox} key={player.playerId}>{player.name}</div>))}\r\n                            </div>\r\n                        </div>\r\n                    : null \r\n                }\r\n                \r\n                {appModel.players.length < appModel.minPlayers\r\n                    ? <div>{`Waiting for at least ${appModel.minPlayers} players to join ...`}</div>\r\n                    : <button className={styles.presenterButton} onClick={() => appModel.startGame()}> Click here to start! </button>\r\n                }               \r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\n@inject(\"appModel\") @observer\r\nclass PausedGamePage  extends React.Component<{appModel?: TemplatoPresenterModel}> {\r\n\r\n    // -------------------------------------------------------------------\r\n    // resumeGame\r\n    // -------------------------------------------------------------------\r\n    private resumeGame = () => {\r\n        this.props.appModel?.resumeGame();\r\n    }\r\n \r\n    // -------------------------------------------------------------------\r\n    // render\r\n    // -------------------------------------------------------------------\r\n    render() {\r\n        const {appModel} = this.props;\r\n        if (!appModel) return <div>NO APP MODEL</div>;\r\n        return (\r\n            <div>\r\n                <p>Templato is paused</p>\r\n                <p>Current players in the room:</p>\r\n                <ul>\r\n                    {appModel.players.map(player => (<li key={player.playerId}>{player.name}</li>))}\r\n                </ul>\r\n                <button\r\n                    className={styles.button}\r\n                    disabled={appModel.players.length < appModel.minPlayers} \r\n                    onClick={() =>this.resumeGame()}>\r\n                        Resume Game\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass PlayStartAnimationController  extends BaseAnimationController {\r\n    @observable announceText = \" \";\r\n    @observable textLocation: string | null = null;\r\n    @observable showStatus: boolean = false;\r\n    \r\n    constructor(onFinish: ()=> void) {      \r\n        super(onFinish);\r\n\r\n        const textAnimation = (fraction: number) =>\r\n        {\r\n            const x = .01 + .01 * Math.sin(fraction * 20)\r\n            this.textLocation = `${(x * 100).toFixed(2)}%`\r\n        }\r\n\r\n        // set up a set of sequential animations\r\n        // delay_s = how many seconds to wait before the action happens\r\n        this.run([\r\n            {delay_s: 1.0, id: \"Introduce Round\",       action: (c)=>{this.announceText = \"Here we go...\"; this.slide(1, textAnimation)}},\r\n            {delay_s: 2.0, id: \"heads up!\",             action: (c)=>{this.announceText = \"Instructions are on your devices\"}},\r\n            {delay_s: 4.0, id: \"Now play\",     action: (c)=>{this.showStatus = true; }},\r\n        ])\r\n    }\r\n}\r\n\r\n@inject(\"appModel\") @observer class PlayingPage \r\n    extends React.Component<{appModel?: TemplatoPresenterModel, media: MediaHelper }> {\r\n    private _playStartAnimation: PlayStartAnimationController;\r\n\r\n    // -------------------------------------------------------------------\r\n    // ctor\r\n    // -------------------------------------------------------------------\r\n    constructor(props: Readonly<{ appModel?: TemplatoPresenterModel, media: MediaHelper }>) {\r\n        super(props);\r\n        this._playStartAnimation = new  PlayStartAnimationController(()=>{});\r\n        props.appModel!.registerAnimation(this._playStartAnimation);\r\n\r\n        props.appModel!.onTick.subscribe(\"animate\", (e) => this.animateFrame(e)) \r\n        props.appModel!.subscribe(\"ColorChange\", \"presenterColorChange\", () => {\r\n            props.media.playSound(TemplatoAssets.sounds.ding)\r\n        })\r\n    }\r\n\r\n    // -------------------------------------------------------------------\r\n    // animateFrame - render a single animation frame to the canvas\r\n    // -------------------------------------------------------------------\r\n    animateFrame = (elapsed_ms: number) => {\r\n        const canvas = document.getElementById(\"presenterGameCanvas\") as HTMLCanvasElement;\r\n        if(!canvas) return;\r\n        const context = canvas.getContext(\"2d\");\r\n        if (!context) return;\r\n\r\n        context.fillStyle = \"#888888\";\r\n        const w = canvas.width;\r\n        const h = canvas.height;\r\n        context.fillRect(0,0,w,h);\r\n\r\n        this.props.appModel?.players.forEach(p=>\r\n            {\r\n                const px = p.x * h;\r\n                const py = p.y * h * .9 + h * 0.05;\r\n                context.font = '50px serif';\r\n                let label = p.name;\r\n                if(p.message !== \"\") label += ` says '${p.message}'`;\r\n                context.fillStyle = \"#777777\" \r\n                context.fillText(label, px+4, py+4);\r\n                context.fillStyle = p.colorStyle;\r\n                context.fillText(label, px, py);\r\n            })\r\n    }\r\n\r\n    // -------------------------------------------------------------------\r\n    // render\r\n    // -------------------------------------------------------------------\r\n    render() {\r\n        const {appModel}= this.props;\r\n        if (!appModel) return <div>NO APP MODEL</div>;\r\n        return (\r\n            <div>\r\n                {this._playStartAnimation.showStatus \r\n                    ? <div>Playing round {appModel.currentRound}.  Seconds left: {appModel.secondsLeftInStage}</div>\r\n                    : <div style={{paddingLeft: this._playStartAnimation.textLocation ?? \"0px\"}}>&nbsp;{this._playStartAnimation.announceText}</div>\r\n                }\r\n                <div className={styles.gameCanvasFrame} >\r\n                    <canvas className={styles.gameCanvas} width=\"1200px\" height=\"700px\" id=\"presenterGameCanvas\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n@inject(\"appModel\") @observer class EndOfRoundPage \r\n    extends React.Component<{appModel?: TemplatoPresenterModel}> {\r\n    // -------------------------------------------------------------------\r\n    // render\r\n    // -------------------------------------------------------------------\r\n    render() {\r\n        const {appModel} = this.props;\r\n        if (!appModel) return <div>NO APP MODEL</div>;\r\n\r\n        return (\r\n            <div>\r\n                <div>End of round {appModel.currentRound}</div>\r\n                {\r\n                    appModel.currentRound >= appModel.totalRounds \r\n                    ? <div>\r\n                            <div>The game is over...</div>\r\n                            <button onClick={() => appModel.startGame()}>Play again, same players</button> \r\n                        </div>\r\n                    : <button onClick={() => appModel.startNextRound()}>Start next round</button> \r\n                }\r\n                              \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n// Presenter Page\r\n// -------------------------------------------------------------------\r\n@inject(\"appModel\")\r\n@observer\r\nexport default class Presenter \r\nextends React.Component<{appModel?: TemplatoPresenterModel, uiProperties: UIProperties}> {\r\n    media: MediaHelper;\r\n\r\n    // -------------------------------------------------------------------\r\n    // ctor\r\n    // -------------------------------------------------------------------\r\n    constructor(props: Readonly<{ appModel?: TemplatoPresenterModel; uiProperties: UIProperties; }>) {\r\n        super(props);\r\n\r\n        const {appModel} = this.props;\r\n\r\n        // Set up sound effects\r\n        this.media = new MediaHelper();\r\n        for(let soundName in TemplatoAssets.sounds)\r\n        {\r\n            this.media.loadSound((TemplatoAssets.sounds as any)[soundName]);\r\n        }\r\n\r\n        const sfxVolume = 1.0;       \r\n\r\n        let timeAlertLoaded = false;\r\n        appModel?.onTick.subscribe(\"Timer Watcher\", ()=>{\r\n            if(appModel!.secondsLeftInStage > 10) timeAlertLoaded = true; \r\n            if( (appModel!.gameState === TemplatoGameState.Playing)\r\n                && timeAlertLoaded \r\n                && appModel!.secondsLeftInStage <= 10) {\r\n                timeAlertLoaded = false \r\n                this.media.repeatSound(\"ding.wav\", 5, 100);\r\n            }\r\n        })\r\n        appModel?.subscribe(PresenterGameEvent.PlayerJoined,     \"play joined sound\", ()=> this.media.playSound(TemplatoAssets.sounds.hello, {volume: sfxVolume * .2}));\r\n        appModel?.subscribe(TemplatoGameEvent.ResponseReceived,  \"play response received sound\", ()=> this.media.playSound(TemplatoAssets.sounds.response, {volume: sfxVolume}));\r\n\r\n    }\r\n\r\n    // -------------------------------------------------------------------\r\n    // renderSubScreen\r\n    // -------------------------------------------------------------------\r\n    private renderSubScreen() {\r\n        const {appModel} = this.props;\r\n        if(!appModel) {\r\n            console.log(\"NO GAME DATA.  Quitting...\")\r\n            return;\r\n        }\r\n\r\n        switch(appModel.gameState)\r\n        {\r\n            case PresenterGameState.Gathering:\r\n                return <GatheringPlayersPage />\r\n            case TemplatoGameState.Playing:\r\n                return <PlayingPage media={this.media} />\r\n            case TemplatoGameState.EndOfRound:\r\n            case GeneralGameState.GameOver:\r\n                return <EndOfRoundPage />\r\n            case GeneralGameState.Paused:\r\n                return <PausedGamePage />\r\n            default:\r\n                return <div>Whoops!  No display for this state: {appModel.gameState}</div>\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------\r\n    // renderFrame\r\n    // -------------------------------------------------------------------\r\n    private renderFrame() {\r\n        const {appModel} = this.props;\r\n        if (!appModel) return <div>NO APP MODEL</div>;\r\n        return (\r\n            <div className={classNames(styles.divRow)}>\r\n                <button className={classNames(styles.button)} \r\n                    style={{marginRight: \"30px\"}}\r\n                    onClick={()=>appModel.quitApp()}>\r\n                        Quit\r\n                </button>                       \r\n                <button className={classNames(styles.button)} \r\n                    disabled={appModel.gameState === PresenterGameState.Gathering}\r\n                    style={{marginRight: \"30px\"}}\r\n                    onClick={()=>appModel.pauseGame()}>\r\n                        Pause\r\n                </button>\r\n                <div className={classNames(styles.roomCode)}>Room Code: {appModel.roomId}</div>\r\n                <DevUI context={appModel} children={<div></div>} />\r\n                <div style={{marginLeft: \"50px\"}}>v{TemplatoVersion}</div>\r\n            </div>)\r\n    }\r\n\r\n    // -------------------------------------------------------------------\r\n    // render\r\n    // -------------------------------------------------------------------\r\n    render() {\r\n        return (\r\n            <UINormalizer\r\n                className={styles.gamepresenter}\r\n                uiProperties={this.props.uiProperties}\r\n                virtualHeight={1080}\r\n                virtualWidth={1920}>\r\n                    {this.renderFrame()}\r\n                    <div style={{margin: \"40px\"}}>\r\n                        {this.renderSubScreen()}\r\n                    </div>\r\n            </UINormalizer>\r\n        );\r\n    };\r\n}\r\n"],"names":["images","logo","sounds","ding","hello","response","GatheringPlayersPage","inject","observer","appModel","this","props","name","window","location","host","roomId","players","length","style","fontWeight","className","styles","map","player","playerId","minPlayers","onClick","startGame","React","PausedGamePage","resumeGame","disabled","PlayStartAnimationController","onFinish","textAnimation","fraction","x","Math","sin","textLocation","toFixed","run","delay_s","id","action","c","announceText","slide","showStatus","BaseAnimationController","observable","PlayingPage","_playStartAnimation","animateFrame","elapsed_ms","canvas","document","getElementById","context","getContext","fillStyle","w","width","h","height","fillRect","forEach","p","px","py","y","font","label","message","fillText","colorStyle","registerAnimation","onTick","subscribe","e","media","playSound","TemplatoAssets","currentRound","secondsLeftInStage","paddingLeft","EndOfRoundPage","totalRounds","startNextRound","Presenter","soundName","MediaHelper","loadSound","timeAlertLoaded","gameState","TemplatoGameState","repeatSound","PresenterGameEvent","volume","sfxVolume","TemplatoGameEvent","PresenterGameState","GeneralGameState","console","log","classNames","marginRight","quitApp","pauseGame","children","marginLeft","TemplatoVersion","uiProperties","virtualHeight","virtualWidth","renderFrame","margin","renderSubScreen"],"sourceRoot":""}